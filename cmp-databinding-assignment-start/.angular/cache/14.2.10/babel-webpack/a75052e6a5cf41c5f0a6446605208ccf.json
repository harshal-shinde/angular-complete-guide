{"ast":null,"code":"import { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { SafeSubscriber } from '../Subscriber';\nimport { operate } from '../util/lift';\nexport function share() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _options$connector = options.connector,\n    connector = _options$connector === void 0 ? function () {\n      return new Subject();\n    } : _options$connector,\n    _options$resetOnError = options.resetOnError,\n    resetOnError = _options$resetOnError === void 0 ? true : _options$resetOnError,\n    _options$resetOnCompl = options.resetOnComplete,\n    resetOnComplete = _options$resetOnCompl === void 0 ? true : _options$resetOnCompl,\n    _options$resetOnRefCo = options.resetOnRefCountZero,\n    resetOnRefCountZero = _options$resetOnRefCo === void 0 ? true : _options$resetOnRefCo;\n  return function (wrapperSource) {\n    var connection;\n    var resetConnection;\n    var subject;\n    var refCount = 0;\n    var hasCompleted = false;\n    var hasErrored = false;\n    var cancelReset = function cancelReset() {\n      resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();\n      resetConnection = undefined;\n    };\n    var reset = function reset() {\n      cancelReset();\n      connection = subject = undefined;\n      hasCompleted = hasErrored = false;\n    };\n    var resetAndUnsubscribe = function resetAndUnsubscribe() {\n      var conn = connection;\n      reset();\n      conn === null || conn === void 0 ? void 0 : conn.unsubscribe();\n    };\n    return operate(function (source, subscriber) {\n      refCount++;\n      if (!hasErrored && !hasCompleted) {\n        cancelReset();\n      }\n      var dest = subject = subject !== null && subject !== void 0 ? subject : connector();\n      subscriber.add(function () {\n        refCount--;\n        if (refCount === 0 && !hasErrored && !hasCompleted) {\n          resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n        }\n      });\n      dest.subscribe(subscriber);\n      if (!connection && refCount > 0) {\n        connection = new SafeSubscriber({\n          next: function next(value) {\n            return dest.next(value);\n          },\n          error: function error(err) {\n            hasErrored = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnError, err);\n            dest.error(err);\n          },\n          complete: function complete() {\n            hasCompleted = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnComplete);\n            dest.complete();\n          }\n        });\n        innerFrom(source).subscribe(connection);\n      }\n    })(wrapperSource);\n  };\n}\nfunction handleReset(reset, on) {\n  if (on === true) {\n    reset();\n    return;\n  }\n  if (on === false) {\n    return;\n  }\n  var onSubscriber = new SafeSubscriber({\n    next: function next() {\n      onSubscriber.unsubscribe();\n      reset();\n    }\n  });\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n  return on.apply(void 0, args).subscribe(onSubscriber);\n}\n//# sourceMappingURL=share.js.map","map":null,"metadata":{},"sourceType":"module"}