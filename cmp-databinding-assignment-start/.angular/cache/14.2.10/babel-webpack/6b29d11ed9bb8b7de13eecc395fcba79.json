{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/admin/learn/udemy-courses/angular-complete-guide/cmp-databinding-assignment-start/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/admin/learn/udemy-courses/angular-complete-guide/cmp-databinding-assignment-start/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/admin/learn/udemy-courses/angular-complete-guide/cmp-databinding-assignment-start/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/admin/learn/udemy-courses/angular-complete-guide/cmp-databinding-assignment-start/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/admin/learn/udemy-courses/angular-complete-guide/cmp-databinding-assignment-start/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/admin/learn/udemy-courses/angular-complete-guide/cmp-databinding-assignment-start/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/admin/learn/udemy-courses/angular-complete-guide/cmp-databinding-assignment-start/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Observable } from './Observable';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\nexport var Subject = /*#__PURE__*/(function () {\n  var Subject = /*#__PURE__*/function (_Observable) {\n    _inherits(Subject, _Observable);\n    var _super = _createSuper(Subject);\n    function Subject() {\n      var _this;\n      _classCallCheck(this, Subject);\n      _this = _super.call(this);\n      _this.closed = false;\n      _this.currentObservers = null;\n      _this.observers = [];\n      _this.isStopped = false;\n      _this.hasError = false;\n      _this.thrownError = null;\n      return _this;\n    }\n    _createClass(Subject, [{\n      key: \"lift\",\n      value: function lift(operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n      }\n    }, {\n      key: \"_throwIfClosed\",\n      value: function _throwIfClosed() {\n        if (this.closed) {\n          throw new ObjectUnsubscribedError();\n        }\n      }\n    }, {\n      key: \"next\",\n      value: function next(value) {\n        var _this2 = this;\n        errorContext(function () {\n          _this2._throwIfClosed();\n          if (!_this2.isStopped) {\n            if (!_this2.currentObservers) {\n              _this2.currentObservers = Array.from(_this2.observers);\n            }\n            var _iterator = _createForOfIteratorHelper(_this2.currentObservers),\n              _step;\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var observer = _step.value;\n                observer.next(value);\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n          }\n        });\n      }\n    }, {\n      key: \"error\",\n      value: function error(err) {\n        var _this3 = this;\n        errorContext(function () {\n          _this3._throwIfClosed();\n          if (!_this3.isStopped) {\n            _this3.hasError = _this3.isStopped = true;\n            _this3.thrownError = err;\n            var observers = _this3.observers;\n            while (observers.length) {\n              observers.shift().error(err);\n            }\n          }\n        });\n      }\n    }, {\n      key: \"complete\",\n      value: function complete() {\n        var _this4 = this;\n        errorContext(function () {\n          _this4._throwIfClosed();\n          if (!_this4.isStopped) {\n            _this4.isStopped = true;\n            var observers = _this4.observers;\n            while (observers.length) {\n              observers.shift().complete();\n            }\n          }\n        });\n      }\n    }, {\n      key: \"unsubscribe\",\n      value: function unsubscribe() {\n        this.isStopped = this.closed = true;\n        this.observers = this.currentObservers = null;\n      }\n    }, {\n      key: \"observed\",\n      get: function get() {\n        var _a;\n        return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;\n      }\n    }, {\n      key: \"_trySubscribe\",\n      value: function _trySubscribe(subscriber) {\n        this._throwIfClosed();\n        return _get(_getPrototypeOf(Subject.prototype), \"_trySubscribe\", this).call(this, subscriber);\n      }\n    }, {\n      key: \"_subscribe\",\n      value: function _subscribe(subscriber) {\n        this._throwIfClosed();\n        this._checkFinalizedStatuses(subscriber);\n        return this._innerSubscribe(subscriber);\n      }\n    }, {\n      key: \"_innerSubscribe\",\n      value: function _innerSubscribe(subscriber) {\n        var _this5 = this;\n        var hasError = this.hasError,\n          isStopped = this.isStopped,\n          observers = this.observers;\n        if (hasError || isStopped) {\n          return EMPTY_SUBSCRIPTION;\n        }\n        this.currentObservers = null;\n        observers.push(subscriber);\n        return new Subscription(function () {\n          _this5.currentObservers = null;\n          arrRemove(observers, subscriber);\n        });\n      }\n    }, {\n      key: \"_checkFinalizedStatuses\",\n      value: function _checkFinalizedStatuses(subscriber) {\n        var hasError = this.hasError,\n          thrownError = this.thrownError,\n          isStopped = this.isStopped;\n        if (hasError) {\n          subscriber.error(thrownError);\n        } else if (isStopped) {\n          subscriber.complete();\n        }\n      }\n    }, {\n      key: \"asObservable\",\n      value: function asObservable() {\n        var observable = new Observable();\n        observable.source = this;\n        return observable;\n      }\n    }]);\n    return Subject;\n  }(Observable);\n  Subject.create = function (destination, source) {\n    return new AnonymousSubject(destination, source);\n  };\n  return Subject;\n})();\nexport var AnonymousSubject = /*#__PURE__*/function (_Subject) {\n  _inherits(AnonymousSubject, _Subject);\n  var _super2 = _createSuper(AnonymousSubject);\n  function AnonymousSubject(destination, source) {\n    var _this6;\n    _classCallCheck(this, AnonymousSubject);\n    _this6 = _super2.call(this);\n    _this6.destination = destination;\n    _this6.source = source;\n    return _this6;\n  }\n  _createClass(AnonymousSubject, [{\n    key: \"next\",\n    value: function next(value) {\n      var _a, _b;\n      (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n    }\n  }, {\n    key: \"error\",\n    value: function error(err) {\n      var _a, _b;\n      (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      var _a, _b;\n      (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n  }, {\n    key: \"_subscribe\",\n    value: function _subscribe(subscriber) {\n      var _a, _b;\n      return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;\n    }\n  }]);\n  return AnonymousSubject;\n}(Subject);\n//# sourceMappingURL=Subject.js.map","map":null,"metadata":{},"sourceType":"module"}